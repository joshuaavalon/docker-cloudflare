/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration for docker-cloudflare
 */
export interface ConfigSchema {
  /**
   * Cloudflare V4 API url. Default to "https://api.cloudflare.com/client/v4/".
   */
  api?: string;
  /**
   * Level of logging. Default to "info"
   */
  logLevel?: string;
  /**
   * Authentication used to interact with API.
   */
  auth: ScopedAuth | GlobalAuth;
  /**
   * List of domains to be updated.
   */
  domains: Domain[];
  /**
   * List of IP echo service that returns IPv4.
   */
  ipv4?: IpEcho[];
  /**
   * List of IP echo service that returns IPv6.
   */
  ipv6?: IpEcho[];
  /**
   * List of IP echo parsers that parses the response from IP echoing service.
   */
  echoParsers?: IpEchoParser[];
}
export interface ScopedAuth {
  /**
   * API Token generated from the User Profile 'API Tokens' page.
   */
  scopedToken: string;
}
export interface GlobalAuth {
  /**
   * DEPRECIATED. Email address associated with your Cloudflare account.
   */
  email: string;
  /**
   * DEPRECIATED. API key generated on the "My Account" page.
   */
  globalToken: string;
}
/**
 * Domain name that needed to be update
 */
export interface Domain {
  /**
   * Domain name that to be updated.
   */
  name: string;
  /**
   * Dns record type. Default to A.
   */
  type?: "A" | "AAAA";
  /**
   * Whether the record is receiving the performance and security benefits of Cloudflare. Default to true.
   */
  proxied?: boolean;
  /**
   * Create record if it does not exits. Default to false.
   */
  create?: boolean;
  /**
   * Zone ID of the domain to be updated.
   */
  zoneId?: string;
  /**
   * Base domain of the domain to be updated.
   */
  zoneName?: string;
  /**
   * Webhook for DNS update.
   */
  webhook?: {
    /**
     * Fired before update run.
     */
    run?: string;
    /**
     * Fired after update success.
     */
    success?: string;
    /**
     * Fired after update failure.
     */
    failure?: string;
    /**
     * Format message
     */
    formatter?: {
      (status: string, response?: unknown): Record<string, any> | undefined;
    };
  };
}
/**
 * IP echo service
 */
export interface IpEcho {
  /**
   * Name or alias of an IP echo parser.
   */
  type: string;
  /**
   * Url of the IP echo service.
   */
  url: string;
  [k: string]: unknown;
}
/**
 * Parser that parses the response from IP echoing service.
 */
export interface IpEchoParser {
  /**
   * Name of the JavaScript package.
   */
  resolve: string;
  /**
   * Alias of the JavaScript package. Must be unique from other parsers' alias and name.
   */
  alias?: string;
}
